@model IEnumerable<XinkRealEstate.Models.Category>

@{
    ViewBag.Title = "Categories";
}

@section stylesheet{
    @Styles.Render("~/AdminLTE/css/dataTables")
}
<div class="box">
    <div class="box-header">
        @Html.ActionLink("Create New", "Create", new { }, new { @class = "btn btn-primary pull-right" })
    </div>
    <div class="box-body">
        <p>
            
        </p>
        <table class="table table-bordered table-hover" id="example"></table>
    </div>
</div>
<!-- /.modal -->
<div class="modal fade" id="modal-warning">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Warning Modal</h4>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this category and all its children?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                <button type="button" class="btn btn-primary" onClick="confirmDelete()">Yes</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
    @Html.AntiForgeryToken()
</div>
<!-- /.modal -->
@section scripts{
    @Scripts.Render("~/AdminLTE/js/dataTables")
    <script>
        var columns = [
            {
                title: '',
                className: 'treegrid-control',
                data: function (item) {
                    if (item.children && item.children.length) {
                        return '<span class="row-expand text-green"><i class="fa fa-fw fa-plus-square"></i></span>'
                    }
                    return '<span class="row-collapse text-aqua"><i class="fa fa-fw fa-minus-square"></i></span>'
                },
                defaultContent: ""
            },{
                // ID
                title: '@Html.DisplayNameFor(model => model.Id)',
                mData: "id",
                visible: false,
                defaultContent: ""
            }, {
                // Name
                title: '@Html.DisplayNameFor(model => model.Name)',
                target: 1,
                mData: "name",
                defaultContent: ""
            }, {
                // Visible
                title: '@Html.DisplayNameFor(model => model.Visible)',
                target: 2,
                className: 'text-center',
                data: function (d) {
                    let content
                    if (d.visible) {
                        content = '<i class="fa fa-check text-aqua" aria-hidden="true"></i>'
                    } else {
                        content = '<i class="fa fa-times text-red" aria-hidden="true"></i>'
                    }
                    return content
                },
                defaultContent: ""
            }, {
                // ParentCategoryId
                title: '@Html.DisplayNameFor(model => model.ParentCategoryId)',
                target: 3,
                mData: "parentCategoryId",
                defaultContent: "",
                visible: false,
            }, {
                // PictureId
                title: '@Html.DisplayNameFor(model => model.PictureId)',
                target: 4,
                mData: "pictureId",
                className: "text-center",
                defaultContent: "",
                visible: false
            }, {
                // Description
                title: '@Html.DisplayNameFor(model => model.Description)',
                target: 5,
                mData: "description",
                defaultContent: ""
            }, {
                // DisplayOrder
                title: '@Html.DisplayNameFor(model => model.DisplayOrder)',
                target: 6,
                mData: "displayOrder",
                defaultContent: ""
            }, {
                // Code
                title: '@Html.DisplayNameFor(model => model.Code)',
                target: 7,
                mData: "code",
                defaultContent: ""
            }, {
                // Action
                title: "Action",
                target: 1,
                className: "text-center",
                data: function (d) {
                    let edit = '<a class="btn btn-xs btn-info" href="@Url.Action("Edit","Category", new { id = "replaceId" })"><i class="fa fa-pencil" aria-hidden="true"></i></a>'.replace('replaceId', d.id)
                    let detail = '@Html.ActionLink("Details", "Details", new { id = "replaceId" })'.replace('replaceId', d.id)
                    let del = `<span class="btn btn-xs btn-danger delete-row" onClick="deleteItem(${d.id})" delete-for="${d.id}"><i class="fa fa-trash" aria-hidden="true"></i></span>`.replace('replaceId', d.id)
                    return `<div>${edit} ${del}</div>`
                },
                defaultContent: ""
            }
        ];

        var categoryTable = categoryTable || {}

        $(document).ready(function () {
            categoryTable = $('#example').DataTable({
                'select': {
                    'style': 'multi',
                    'selector': 'td:not(:first-child)'
                },
                "autoWidth": false,
                "ordering": true,
                "processing": true,
                "serverSide": true,
                "pageLength": 10,
                'columns': columns,
                'ajax': {
                    type: "POST",
                    contentType: "application/json",
                    url: '/Category/GetDataTable',
                    data: function (d) {
                        if (!d) {
                            categoryTable.clear().draw()
                        }
                        // note: d is created by datatable, the structure of d is the same with DataTableParameters model above
                        console.log(JSON.stringify(d));
                        return JSON.stringify(d);
                    }
                },
                'treeGrid': {
                    'left': 10,
                    'expandIcon': '<span class="row-expand text-green"><i class="fa fa-fw fa-plus-square"></i></span>',
                    'collapseIcon': '<span class="row-collapse text-aqua"><i class="fa fa-fw fa-minus-square"></i></span>'
                }
            }).on('draw', function (e, settings, data) {
                expandAllRows()
                $(".delete-row").on("click", function (e) {
                    console.log($(this).attr("delete-for"))
                    e.preventDefault()
                })
            });;

            $(".delete-row").on("click", function (e) {
                console.log($(this).attr("delete-for"))
                e.preventDefault()
            })
        });

        @* dumb code, fix it if you can @@ *@
        function expandAllRows() {
            setTimeout(function () {
                return
                $(".treegrid-control").trigger("click")
                $(".treegrid-control").trigger("click")
                $(".treegrid-control").trigger("click")
            }, 10)
        }

        var selectedIdDelete = -1

        function deleteItem(id) {
            selectedIdDelete = id
            $("#modal-warning").modal("show")
        }

        function confirmDelete() {
            if (selectedIdDelete >= 0) {
                var token = $('input[name="__RequestVerificationToken"]').val();
                $.ajax({
                    url: '@Url.Action("Delete")',
                    data: { id: selectedIdDelete, __RequestVerificationToken: token },
                    type: 'post',
                    traditional: true
                }).done(function () {
                    categoryTable.ajax.reload()
                    $("#modal-warning").modal("hide")
                }).fail(function (er) {
                    console.log(er)
                });
            }
        }
    </script>
}
