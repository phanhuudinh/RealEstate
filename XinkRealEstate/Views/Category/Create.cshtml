@model XinkRealEstate.Models.Category
@using XinkRealEstate.Models

@{
    ViewBag.Title = "Create category";
    List<SelectListItem> categories = ViewBag.categories as List<SelectListItem>;
}

<div class="row">
    <div class="col-md-6">
        <div class="box">
            <div class="box-header with-border">
                @*<h3 class="box-title">Quick Example</h3>*@
            </div>
            <!-- /.box-header -->
            <!-- form start -->
            @using (Html.BeginForm("Create", "Category", FormMethod.Post, new { @class= "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                <div class="box-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                       <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ParentCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.ParentCategoryId, categories, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ParentCategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @{ Html.EnableClientValidation(false); }
                            @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control", @Value = "0" } })
                            @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                            @{ Html.EnableClientValidation(true); }
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="box-footer">
                    <input type="submit" value="Create" class="btn btn-primary pull-right" />
                </div>
            }
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Category", "Index", "Category")
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script>
        $(function () {
            $("#DisplayOrder").rules("remove", "required");
        })
    </script>
}
