@model XinkRealEstate.Models.Category
@using XinkRealEstate.Models

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@{Html.EnableClientValidation(false);}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    List<Category> ctgs = ViewBag.categories;
    List<SelectListItem> states = new List<SelectListItem>();

    states.Add(new SelectListItem { Text = "", Value = "-1", Selected = true });

    if (ctgs != null)
    {
        foreach (Category c in ctgs)
        {
            states.Add(new SelectListItem { Text = c.Name, Value = c.Id.ToString() });
        }
    }

    <div class="form-horizontal">
        <h4>Category</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ParentCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ParentCategoryId, states, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ParentCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{ Html.EnableClientValidation(false); }
                @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control", @Value="0" } })
                @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                @{ Html.EnableClientValidation(true); }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script>
        $(function () {
            $("#DisplayOrder").rules("remove", "required");
        })
    </script>
}
